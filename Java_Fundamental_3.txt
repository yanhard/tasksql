####
DDL
####

=====
No. 1
=====

-- Membuat tabel karyawan
CREATE TABLE karyawan (
    id INT PRIMARY KEY,
    nama VARCHAR(255),
    jk CHAR(1),
    dob DATE,
    status VARCHAR(255),
    alamat VARCHAR(255)
);

-- Membuat tabel detail_karyawan
CREATE TABLE detail_karyawan (
    id INT PRIMARY KEY,
    id_karyawan INT,
    nik VARCHAR(255),
    npwp VARCHAR(255),
    FOREIGN KEY (id_karyawan) REFERENCES karyawan (id)
);

======
No. 2
======

-- Membuat tabel rekening
CREATE TABLE rekening (
    id INT PRIMARY KEY,
    id_karyawan INT,
    nama VARCHAR(255),
    jenis VARCHAR(255),
    nomor VARCHAR(255),
    FOREIGN KEY (id_karyawan) REFERENCES karyawan (id)
);


======
No. 3
======

-- Membuat tabel training
CREATE TABLE training (
    id INT PRIMARY KEY,
    tema VARCHAR(255),
    nama_pengajar VARCHAR(255)
);

======
No. 4
======

-- Membuat tabel karyawan_training
CREATE TABLE karyawan_training (
    id INT PRIMARY KEY,
    id_karyawan INT,
    id_training INT,
    tanggal_training DATE,
    FOREIGN KEY (id_karyawan) REFERENCES karyawan (id),
    FOREIGN KEY (id_training) REFERENCES training (id)
);

#######################
Table Karyawan + detil
#######################
======
No. 1
======

CREATE OR REPLACE FUNCTION savekaryawan(
    INOUT nama VARCHAR,
    INOUT jk VARCHAR,
    INOUT dob DATE,
    INOUT alamat TEXT,
    INOUT status VARCHAR,
    INOUT nik VARCHAR,
    INOUT npwp VARCHAR,
    INOUT id BIGINT,
    OUT eror_desc VARCHAR,
    OUT eror_code INTEGER
)
LANGUAGE plpgsql
AS $$
DECLARE
    v_id_karyawan BIGINT;
BEGIN
    -- Insert data into karyawan table
    INSERT INTO karyawan (nama, jk, dob, status, alamat)
    VALUES (nama, jk, dob, status, alamat)
    RETURNING id INTO v_id_karyawan;

    -- Insert data into detail_karyawan table
    INSERT INTO detail_karyawan (id_karyawan, nik, npwp)
    VALUES (v_id_karyawan, nik, npwp)
    RETURNING id INTO id;

    -- Set error_code and error_desc to success
    eror_code := 0;
    eror_desc := 'Success';
EXCEPTION
    WHEN OTHERS THEN
        -- Set error_code and error_desc to the error details
        eror_code := SQLSTATE;
        eror_desc := SQLERRM;
END;
$$;

======
No. 2
======

CREATE OR REPLACE FUNCTION updatekaryawan(
    INOUT nama VARCHAR,
    INOUT jk VARCHAR,
    INOUT dob DATE,
    INOUT alamat TEXT,
    INOUT status VARCHAR,
    INOUT nik VARCHAR,
    INOUT npwp VARCHAR,
    INOUT id BIGINT,
    OUT eror_desc VARCHAR,
    OUT eror_code INTEGER
)
LANGUAGE plpgsql
AS $$
DECLARE
    v_id_karyawan BIGINT;
BEGIN
    -- Update data in karyawan table
    UPDATE karyawan
    SET nama = nama,
        jk = jk,
        dob = dob,
        status = status,
        alamat = alamat
    WHERE id = id;

    -- Find id_karyawan in detail_karyawan table
    SELECT id_karyawan INTO v_id_karyawan
    FROM detail_karyawan
    WHERE id = id;

    -- Update data in detail_karyawan table
    UPDATE detail_karyawan
    SET nik = nik,
        npwp = npwp
    WHERE id_karyawan = v_id_karyawan;

    -- Set error_code and error_desc to success
    eror_code := 0;
    eror_desc := 'Success';
EXCEPTION
    WHEN OTHERS THEN
        -- Set error_code and error_desc to the error details
        eror_code := SQLSTATE;
        eror_desc := SQLERRM;
END;
$$;

======
No. 3
======

CREATE OR REPLACE FUNCTION getlistkaryawan(IN nama VARCHAR)
RETURNS TABLE (
    id BIGINT,
    nama VARCHAR,
    jk VARCHAR,
    dob DATE,
    status VARCHAR,
    alamat TEXT,
    nik VARCHAR,
    npwp VARCHAR
)
LANGUAGE plpgsql
AS $$
BEGIN
    RETURN QUERY
    SELECT k.id, k.nama, k.jk, k.dob, k.status, k.alamat, dk.nik, dk.npwp
    FROM karyawan k
    JOIN detail_karyawan dk ON k.id = dk.id_karyawan
    WHERE k.nama ILIKE '%' || nama || '%';
END;
$$;

======
No. 4
======

CREATE OR REPLACE FUNCTION getkaryawan(IN id_karyawan BIGINT)
RETURNS TABLE (
    id BIGINT,
    nama VARCHAR,
    jk VARCHAR,
    dob DATE,
    status VARCHAR,
    alamat TEXT,
    nik VARCHAR,
    npwp VARCHAR
)
LANGUAGE plpgsql
AS $$
BEGIN
    RETURN QUERY
    SELECT k.id, k.nama, k.jk, k.dob, k.status, k.alamat, dk.nik, dk.npwp
    FROM karyawan k
    JOIN detail_karyawan dk ON k.id = dk.id_karyawan
    WHERE k.id = id_karyawan;
END;
$$;

###############
Table Training
###############
======
No. 5
======

CREATE OR REPLACE FUNCTION savetraining(
    INOUT tema VARCHAR,
    INOUT nama_pengajar VARCHAR,
    INOUT id BIGINT,
    OUT eror_desc VARCHAR,
    OUT eror_code INTEGER
)
LANGUAGE plpgsql
AS $$
BEGIN
    -- Insert data into training table
    INSERT INTO training (tema, nama_pengajar)
    VALUES (tema, nama_pengajar)
    RETURNING id INTO id;

    -- Set error_code and error_desc to success
    eror_code := 0;
    eror_desc := 'Success';
EXCEPTION
    WHEN OTHERS THEN
        -- Set error_code and error_desc to the error details
        eror_code := SQLSTATE;
        eror_desc := SQLERRM;
END;
$$;

======
No. 6
======

CREATE OR REPLACE FUNCTION updatetraining(
    INOUT tema VARCHAR,
    INOUT nama_pengajar VARCHAR,
    INOUT id BIGINT,
    OUT eror_desc VARCHAR,
    OUT eror_code INTEGER
)
LANGUAGE plpgsql
AS $$
BEGIN
    -- Update data in training table
    UPDATE training
    SET tema = tema,
     ======   nama_pengajar = nama_pengajar
No. 8    WHERE id = id;

    -- Set error_code and error_desc to success
    eror_code := 0;
    eror_desc := 'Success';
EXCEPTION
    WHEN OTHERS THEN
        -- Set error_code and error_desc to the error details
        eror_code := SQLSTATE;
        eror_desc := SQLERRM;
END;
$$;

======
No. 7
======

CREATE OR REPLACE FUNCTION getlisttraining(IN tema VARCHAR)
RETURNS TABLE (
    id BIGINT,
    tema VARCHAR,
    nama_pengajar VARCHAR
)
LANGUAGE plpgsql
AS $$
BEGIN
    RETURN QUERY
    SELECT t.id, t.tema, t.nama_pengajar
    FROM training t
    WHERE t.tema ILIKE '%' || tema || '%';
END;
$$;

======
No. 8
======

CREATE OR REPLACE FUNCTION getbyidtraining(IN id_training BIGINT)
RETURNS TABLE (
    id BIGINT,
    tema VARCHAR,
    nama_pengajar VARCHAR
)
LANGUAGE plpgsql
AS $$
BEGIN
    RETURN QUERY
    SELECT t.id, t.tema, t.nama_pengajar
    FROM training t
    WHERE t.id = id_training;
END;
$$;


########################
Table Training Karyawan
########################
======
No. 9
======

CREATE OR REPLACE FUNCTION savetrainingkaryawan(
    INOUT id_karyawan BIGINT,
    INOUT id_training BIGINT,
    INOUT tanggal_training DATE,
    INOUT id BIGINT,
    OUT eror_desc VARCHAR,
    OUT eror_code INTEGER
)
LANGUAGE plpgsql
AS $$
BEGIN
    -- Insert data into karyawan_training table
    INSERT INTO karyawan_training (id_karyawan, id_training, tanggal_training)
    VALUES (id_karyawan, id_training, tanggal_training)
    RETURNING id INTO id;

    -- Set error_code and error_desc to success
    eror_code := 0;
    eror_desc := 'Success';
EXCEPTION
    WHEN OTHERS THEN
        -- Set error_code and error_desc to the error details
        eror_code := SQLSTATE;
        eror_desc := SQLERRM;
END;
$$;

======
No. 10
======

CREATE OR REPLACE FUNCTION deletetrainingkaryawan(
    INOUT id BIGINT,
    OUT eror_desc VARCHAR,
    OUT eror_code INTEGER
)
LANGUAGE plpgsql
AS $$
BEGIN
    -- Delete data from karyawan_training table
    DELETE FROM karyawan_training
    WHERE id = id;

    -- Set error_code and error_desc to success
    eror_code := 0;
    eror_desc := 'Success';
EXCEPTION
    WHEN OTHERS THEN
        -- Set error_code and error_desc to the error details
        eror_code := SQLSTATE;
        eror_desc := SQLERRM;
END;
$$;


###############
Table Rekening
###############
========
No. 11
========

CREATE OR REPLACE FUNCTION saverekening(
    INOUT id_karyawan BIGINT,
    INOUT nama VARCHAR,
    INOUT jenis VARCHAR,
    INOUT nomor VARCHAR,
    INOUT id BIGINT,
    OUT eror_desc VARCHAR,
    OUT eror_code INTEGER
)
LANGUAGE plpgsql
AS $$
BEGIN
    -- Insert data into rekening table
    INSERT INTO rekening (id_karyawan, nama, jenis, nomor)
    VALUES (id_karyawan, nama, jenis, nomor)
    RETURNING id INTO id;

    -- Set error_code and error_desc to success
    eror_code := 0;
    eror_desc := 'Success';
EXCEPTION
    WHEN OTHERS THEN
        -- Set error_code and error_desc to the error details
        eror_code := SQLSTATE;
        eror_desc := SQLERRM;
END;
$$;

=======
No. 12
=======

CREATE OR REPLACE FUNCTION updaterekening(
    INOUT id_karyawan BIGINT,
    INOUT nama VARCHAR,
    INOUT jenis VARCHAR,
    INOUT nomor VARCHAR,
    INOUT id BIGINT,
    OUT eror_desc VARCHAR,
    OUT eror_code INTEGER
)
LANGUAGE plpgsql
AS $$
BEGIN
    -- Update data in rekening table
    UPDATE rekening
    SET id_karyawan = id_karyawan,
        nama = nama,
        jenis = jenis,
        nomor = nomor
    WHERE id = id;

    -- Set error_code and error_desc to success
    eror_code := 0;
    eror_desc := 'Success';
EXCEPTION
    WHEN OTHERS THEN
        -- Set error_code and error_desc to the error details
        eror_code := SQLSTATE;
        eror_desc := SQLERRM;
END;
$$;

=======
No. 13
=======

-- Alter the rekening table to add deleted_date column if it doesn't exist
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'rekening' AND column_name = 'deleted_date') THEN
        ALTER TABLE rekening ADD COLUMN deleted_date TIMESTAMP;
    END IF;
END;
$$;

-- Create the soft delete stored procedure
CREATE OR REPLACE FUNCTION deleterekening(
    INOUT id BIGINT,
    OUT eror_desc VARCHAR,
    OUT eror_code INTEGER
)
LANGUAGE plpgsql
AS $$
BEGIN
    -- Soft delete data in rekening table by setting the deleted_date
    UPDATE rekening
    SET deleted_date = NOW()
    WHERE id = id;

    -- Set error_code and error_desc to success
    eror_code := 0;
    eror_desc := 'Success';
EXCEPTION
    WHEN OTHERS THEN
        -- Set error_code and error_desc to the error details
        eror_code := SQLSTATE;
        eror_desc := SQLERRM;
END;
$$;




































































































